from machine import Pin, PWM, SoftI2C
import ssd1306
import framebuf
import time
import network
import ujson
import json
import buzzer
import _thread
from umqtt.simple import MQTTClient

led_ll= Pin(23, Pin.OUT)
led_lr= Pin(22, Pin.OUT)
led_ur= Pin(21, Pin.OUT)
led_ul= Pin(19, Pin.OUT)
infrared = Pin(26, Pin.IN)
buz = buzzer.BUZZER(18)
i2c = SoftI2C(sda=Pin(16), scl=Pin(17))
display = ssd1306.SSD1306_I2C(128, 64, i2c)
servoMotor = PWM(Pin(15), freq = 50, duty = 26)

closed_lock = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfa\x7f\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xe0\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xc0\x07\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\x03\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x03\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x01\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x01\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x01\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x01\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x01\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xfe\xaa\xab\xff@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xfd\x7f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xe0\x1f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xe0\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xc0\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xc0\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xe0\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xe0\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0\x1f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf8?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf8?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf8?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0\x1f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xf0?\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
open_lock = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf1\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x0f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x07\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x03\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfc\x03\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x03\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x03\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x0f\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x87\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x07\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x07\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xb7\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
broken_lock = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x0f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x0f\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf0\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf8\x0f\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf8\x07\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xf0\x07\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xf0\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xe0\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x80\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x80\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x80\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x80\t\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\x0f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\x0f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfe\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfe\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\x03\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\x07\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf8\x0f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf0\x1f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf0?\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xe0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf0\x7f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf8?\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc?\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc?\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfe\x1f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\x1f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\x9f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\x9f\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xcf\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xcf\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xf7\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
leds = [led_ll, led_lr, led_ur, led_ul]
infrared_on = False
last_found = 0

######## Utility Functions

def resetLeds():
    """
    Turns off all the LED lights.
    """
    for led in leds:
        led.off()
    
def toggle(led):
    """
    Toggles the state of the specified LED.

    Parameters
    ----------
    led : machine.Pin 
        The name of the led whose state you want to change.
    """
    
    led.value(not led.value())

def displayImage(img):
    """
    Displays an image on the SSD1306 OLED display.

    Parameters
    ----------
    img : bytearray 
        The image in bytearray that you want to show on the OLED display.
    """
    
    buffer = img

    fb = framebuf.FrameBuffer(buffer, 128, 64, framebuf.MONO_HLSB)
    display.fill(0)
    display.blit(fb, 0, 0)
    display.show()

def set_angle(angle):
    """
    Sets the angle of the servo motor.

    Parameters
    ----------
    angle : int
        The angle you want to set for the servo motor.
    """
    
    duty_min = 26
    duty_max = 123

    servoMotor.duty(int(duty_min + (angle*(duty_max - duty_min))/180))

def resetSystem():
    """
    Resets the system by turning off the LEDs, 
    displaying the closed lock image, 
    setting the servo angle to 0, 
    and resetting the small and big alarm flags.
    """
    
    global smallAlarm
    global bigAlarm
    resetLeds()
    displayImage(closed_lock)
    set_angle(0)
    smallAlarm = False
    bigAlarm = False 

def checkLeds(n_attempt):
    """
    Verifies that the LEDs are correctly illuminated. 
    If the LEDs preceding the one to be activated are not, it turns them on.

    Parameters
    ----------
    n_attempt : int
        The LED to be turned on, corresponding to a certain number of attempts.
    """
    
    for count in range(n_attempt - 1):
        if not leds[count].value():
            toggle(leds[count])

def lightAlarm():
    """
    Implements the alarm, making LEDs lighting alternate.
    """
    
    toggle(led_ll)
    time.sleep(0.1)
    toggle(led_ll)
    toggle(led_lr)
    time.sleep(0.1)
    toggle(led_lr)
    toggle(led_ur)
    time.sleep(0.1)
    toggle(led_ur)
    toggle(led_ul)
    time.sleep(0.1)
    toggle(led_ul)
    time.sleep(0.1)

def lightBigAlarm():
    """
    It implements the alarm as long as bigAlarm is true, making LEDs lightning alternate. 
    When bigAlarm changes state all LEDs are turned off. 
    """
    
    global bigAlarm
    
    while bigAlarm:
        lightAlarm()
    resetLeds()

def errorAlarm(last_time):
    """
    Triggers a small alarm sequence for 10 seconds.
    """
    
    ALARM_TIME = 10
    global smallAlarm
    smallAlarm = True
    while (time.time()) - last_time < ALARM_TIME:
        lightAlarm()
    resetSystem()

def infraredAlarm(infr):
    """
    If the infrared sensor is on and the big alarm flag is not active, 
    publishes a message to MQTT topic to trigger the big alarm.

    Parameters
    ----------
    infr : machine.Pin
        Parameter to be passed necessarily to irq function but is always None.
    """
    
    global client
    global topic
    global client_id
    global bigAlarm
    global infrared_on
    global last_found
    
    current_found = time.ticks_ms()
    offset = time.ticks_diff(current_found, last_found)

    if offset < 200:
        return
    
    last_found = current_found
    
    if infrared_on and not bigAlarm:
        msg = ujson.dumps({
            'client_id': client_id
        })
        client.publish(topic, msg)
        bigAlarm = True
        displayImage(broken_lock)

def openCaveau():
    """
    Opens the caveau by displaying the open lock image, 
    turning off LEDs and setting servo motor angle to 90 unless a big alarm is active.
    """
    
    global bigAlarm
    
    if bigAlarm:
        resetSystem()
    else:
        displayImage(open_lock)
        resetLeds()
        set_angle(180)
    return

def closeCaveau():
    """
    Closes the caveau by displaying the closed lock image and 
    setting servo motor angle to 0 unless a small or big alarm is active.
    """
    
    global smallAlarm
    global bigAlarm
    
    if not smallAlarm and not bigAlarm:
        displayImage(closed_lock)
        set_angle(0)
    return

def codeError(n_attempt: int):
    """
    Toggles the LED corresponding to the attempt number unless a big alarm is active. 
    If there are 5 attempts, it triggers the alarm.

    Parameters
    ----------
    n_attempt : int
        The number of attempts tried by user.
    """
    
    global bigAlarm
    ALARM_TIME = 10
    
    if not bigAlarm:
        if n_attempt == 1:
            toggle(led_ll)
        if n_attempt == 2:
            checkLeds(n_attempt)
            toggle(led_lr)
        if n_attempt == 3:
            checkLeds(n_attempt)
            toggle(led_ur)
        if n_attempt == 4:
            checkLeds(n_attempt)
            toggle(led_ul)
        if n_attempt == 5:
            checkLeds(n_attempt)
            last_time = time.time()
            _thread.start_new_thread(errorAlarm, (last_time,))
            displayImage(broken_lock)
            while (time.time()) - last_time < ALARM_TIME:
                for note in buzzer.alarm:
                    if note != 0:
                        buz.pwm.duty(512)
                        buz.pwm.freq(note)
                    time.sleep_ms(150)
                    buz.pwm.duty(0)
        
###### Callback function
def subCallback(topic, msg):
    """
    This is the callback function for the MQTT client. 
    It handles different operations based on the op_code in the incoming MQTT messages.
    """
    
    global client_id
    global infrared_on
    global bigAlarm
    msg = ujson.loads(msg)
    
    if msg['client_id'] != client_id:
        print(topic, msg)
        if msg['op_code'] == 1:
            # Tentativo sblocco cassaforte
            if msg['open_caveau']:
                print('Op 1 - Caveau opened')
                openCaveau()
            else:
                print('Op 1 - Number of leds on: {}'.format(msg['attempt_number']))
                codeError(msg['attempt_number'])
                closeCaveau()
        elif msg['op_code'] == 2:
            # Settaggio infrarossi
            if msg['alarm_set']:
                print('Op 2 - Infrared sensor on')
                infrared_on = True
            else:
                print('Op 2 - Infrared sensor off')
                infrared_on = False
        elif msg['op_code'] == 3:
            # Sirena silenziata
            print('Op 3 - Alarm muted')
            bigAlarm = False
        else:
            print('Non valid operation code')
    return

######## Main

resetSystem()

topic = "SHIELDGuardian/test"
client_id = 'caveau'

sta_if = network.WLAN(network.STA_IF)
if not sta_if.isconnected():
    print('Connettendo al network...')
    sta_if.active(True)
    sta_if.connect('TIM-28542872', 'Antonio37@')
    while not sta_if.isconnected():
        pass
print('Connessione riuscita!')
print('Configurazione rete:', sta_if.ifconfig())

try:
    client = MQTTClient(client_id, "test.mosquitto.org")
    client.set_callback(subCallback)
    client.connect()
    client.subscribe(topic)
    while True:
        client.check_msg()
        infrared.irq(trigger=Pin.IRQ_RISING, handler=infraredAlarm)
        if bigAlarm:
            _thread.start_new_thread(lightBigAlarm, ())
        while bigAlarm:
            client.check_msg()
            for note in buzzer.alarm:
                if not bigAlarm:
                    break
                if note != 0:
                    buz.pwm.duty(512)
                    buz.pwm.freq(note)
                time.sleep_ms(150)
                buz.pwm.duty(0)
except Exception as e:
    print('exception: ', e)
finally:
    resetSystem()
    client.disconnect()
    

    
